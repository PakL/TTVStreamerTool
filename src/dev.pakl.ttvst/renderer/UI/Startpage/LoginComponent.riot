<LoginComponent>
	<div class="avatar">
		<img src={ state.avatarUrl } alt="" />
	</div>
	<div class="loginstatus">
		<div class="flexwrap">
			<strong class="loginname accent-contrast-font">{ state.loginName }</strong>
			<p class="logintext">{ __(logintext) }</p>
			<button type="button" onclick={ onBtnClick } disabled={ state.waiting }>{ __(btntext) }</button>
		</div>
	</div>
	
	<style>
		:host {
			display: block;
			width: 50%;
			max-width: 50%;
			margin: 20px auto;
			padding: 10px;
			background: rgba(255,255,255, 0.01);
			border: 1px solid rgba(0,0,0, 0.3);
		}

		:host > div {
			vertical-align: top;
		}

		:host > .avatar {
			display: inline-block;
			height: 120px;
			width: 120px;
			text-align: center;
			line-height: 120px;
		}
		:host > .avatar > img {
			max-height: 100%;
			max-width: 100%;
		}

		:host > .loginstatus {
			display: inline-block;
			width: calc(100% - 130px);
			margin-left: 10px;
		}
		:host > .loginstatus .logintext {
			margin: 0;
			overflow: hidden;
		}
		:host > .loginstatus button {
			display: block;
			text-align: center;
			width: 100%;
		}

		:host > .loginstatus > .flexwrap {
			display: flex;
			flex-wrap: wrap;
			flex-direction: column;
			justify-content: space-between;
			height: 120px;
		}
	</style>

	<script>
		export default {
			avatar_url: 'https://static-cdn.jtvnw.net/user-default-pictures-uv/cdd517fe-def4-11e9-948e-784f43822e80-profile_image-300x300.png',

			loginCallback: null,
			logoutCallback: null,

			logintext: 'Please log in to twitch to use the TTVStreamerTool to its full potential.',
			btntext: 'Login',

			onBeforeMount(props, state) {
				this.__ = global.TTVST.i18n.__;
				this.state = Object.assign({ waiting: false, loggedin: false, loginName: '', avatarUrl: this.avatar_url }, state);

				this.onBeforeUpdate(props, this.state);
			},

			onBeforeUpdate(props, state) {
				if(!state.loggedin) {
					this.state.avatarUrl = this.avatar_url;
				}
				if(!state.waiting) {
					if(!state.loggedin) {
						this.state.loginName = this.__('Not logged in');
						this.logintext = 'Please log in to twitch to use the TTVStreamerTool to its full potential.';
						this.btntext = 'Login';
					} else {
						this.logintext = 'Logged in and ready to use the TTVStreamerTool.';
						this.btntext = 'Logout';
					}
				} else {
					this.state.loginName = this.__('Waiting...');
					this.logintext = 'Something is happening right now. Please wait.';
					this.btntext = '...';
				}
			},

			setLoginCallback(callback) {
				if(typeof(callback) == 'function') {
					this.loginCallback = callback;
				}
			},
			setLogoutCallback(callback) {
				if(typeof(callback) == 'function') {
					this.logoutCallback = callback;
				}
			},

			onBtnClick() {
				if(!this.state.waiting) {
					if(!this.state.loggedin) {
						this.onLoginClick();
					} else {
						this.onLogoutClick();
					}
				}
			},
			onLoginClick() {
				if(typeof(this.loginCallback) == 'function') {
					this.loginCallback();
					this.update({ waiting: true });
				}
			},
			onLogoutClick() {
				if(typeof(this.logoutCallback) == 'function') {
					this.logoutCallback();
					this.update({ loggedin: false });
				}
			}
		}
	</script>
</LoginComponent>